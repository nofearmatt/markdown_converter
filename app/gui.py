# -*- coding: utf-8 -*-
"""
–ú–æ–¥—É–ª—å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AI Studio Converter.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç CustomTkinter –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
"""

import os
import threading
import queue
import tkinter as tk
from tkinter import filedialog, messagebox
from typing import Dict, Any
import customtkinter as ctk
from pathlib import Path

from app.app_logic import convert_files
from app.settings import load_settings, save_settings
from app.watcher import DirectoryWatcher

class MainWindow:
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è AI Studio Converter.
    """
    
    def __init__(self, settings: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        
        Args:
            settings: –°–ª–æ–≤–∞—Ä—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        self.settings = settings
        self.progress_queue = queue.Queue()
        self.watcher = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CustomTkinter
        ctk.set_appearance_mode("dark")  # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        ctk.set_default_color_theme("blue")  # –°–∏–Ω—è—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
        # –î–µ–ª–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
        try:
            ctk.set_window_scaling(0.85)
            ctk.set_widget_scaling(0.85)
        except Exception:
            pass
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.root = ctk.CTk()
        self.root.title("AI Studio Converter - –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ Markdown/HTML")
        # –ë–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –æ–∫–Ω–æ
        self.root.geometry("900x560")
        self.root.resizable(True, True)

        # –ò–∫–æ–Ω–∫–∞ –æ–∫–Ω–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        try:
            from pathlib import Path as _P
            project_root = _P(__file__).resolve().parent.parent
            icon_path = project_root / "assets" / "icon.ico"
            if icon_path.exists():
                # –î–ª—è Windows .ico
                self.root.iconbitmap(str(icon_path))
        except Exception:
            pass
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
        self.center_window()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.start_progress_handler()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def center_window(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä—É–µ—Ç –æ–∫–Ω–æ –Ω–∞ —ç–∫—Ä–∞–Ω–µ."""
        self.root.update_idletasks()
        width = self.root.winfo_width()
        height = self.root.winfo_height()
        x = (self.root.winfo_screenwidth() // 2) - (width // 2)
        y = (self.root.winfo_screenheight() // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = ctk.CTkLabel(
            self.root,
            text="AI Studio Converter",
            font=ctk.CTkFont(size=20, weight="bold")
        )
        title_label.pack(pady=12)
        
        subtitle_label = ctk.CTkLabel(
            self.root,
            text="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä JSON —Ñ–∞–π–ª–æ–≤ AI Studio –≤ Markdown",
            font=ctk.CTkFont(size=12)
        )
        subtitle_label.pack(pady=(0, 14))
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ctk.CTkFrame(self.root)
        main_frame.pack(fill="both", expand=True, padx=12, pady=(0, 12))

        # –í–µ—Ä—Ö–Ω—è—è —Å—Ç—Ä–æ–∫–∞: –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏ (—Å–ª–µ–≤–∞ ‚Äî –≤—ã–±–æ—Ä –ø–∞–ø–æ–∫, —Å–ø—Ä–∞–≤–∞ ‚Äî –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
        top_row = ctk.CTkFrame(main_frame)
        top_row.pack(fill="both", expand=False, padx=0, pady=(8, 8))

        left_col = ctk.CTkFrame(top_row)
        left_col.pack(side="left", fill="both", expand=True, padx=(0, 6))

        right_col = ctk.CTkFrame(top_row)
        right_col.pack(side="left", fill="both", expand=True, padx=(6, 0))

        # –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫ (—Å–ª–µ–≤–∞)
        self.create_folder_selection_section(left_col)

        # –°–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—Å–ø—Ä–∞–≤–∞)
        self.create_settings_section(right_col)
        
        # –°–µ–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.create_control_section(main_frame)
        
        # –°–µ–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ª–æ–≥–æ–≤
        self.create_progress_section(main_frame)
    
    def create_folder_selection_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞ –ø–∞–ø–æ–∫."""
        folder_frame = ctk.CTkFrame(parent)
        folder_frame.pack(fill="x", padx=12, pady=12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        folder_title = ctk.CTkLabel(
            folder_frame,
            text="üìÅ –í—ã–±–æ—Ä –ø–∞–ø–æ–∫",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        folder_title.pack(pady=(12, 8))
        
        # –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞
        source_frame = ctk.CTkFrame(folder_frame)
        source_frame.pack(fill="x", padx=12, pady=8)
        
        source_label = ctk.CTkLabel(source_frame, text="–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ —Å JSON —Ñ–∞–π–ª–∞–º–∏:")
        source_label.pack(anchor="w", padx=10, pady=(10, 5))
        
        source_path_frame = ctk.CTkFrame(source_frame)
        source_path_frame.pack(fill="x", padx=8, pady=(0, 8))
        
        self.source_entry = ctk.CTkEntry(
            source_path_frame,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å JSON —Ñ–∞–π–ª–∞–º–∏ AI Studio...",
            height=30
        )
        self.source_entry.pack(side="left", fill="x", expand=True, padx=(8, 8), pady=6)
        
        source_button = ctk.CTkButton(
            source_path_frame,
            text="–û–±–∑–æ—Ä",
            width=72,
            height=32,
            command=self.browse_source_folder
        )
        source_button.pack(side="right", padx=(0, 8), pady=6)
        
        # –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        dest_frame = ctk.CTkFrame(folder_frame)
        dest_frame.pack(fill="x", padx=12, pady=8)
        
        dest_label = ctk.CTkLabel(dest_frame, text="–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Markdown —Ñ–∞–π–ª–æ–≤:")
        dest_label.pack(anchor="w", padx=10, pady=(10, 5))
        
        dest_path_frame = ctk.CTkFrame(dest_frame)
        dest_path_frame.pack(fill="x", padx=8, pady=(0, 8))
        
        self.dest_entry = ctk.CTkEntry(
            dest_path_frame,
            placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...",
            height=30
        )
        self.dest_entry.pack(side="left", fill="x", expand=True, padx=(8, 8), pady=6)
        
        dest_button = ctk.CTkButton(
            dest_path_frame,
            text="–û–±–∑–æ—Ä",
            width=72,
            height=32,
            command=self.browse_dest_folder
        )
        dest_button.pack(side="right", padx=(0, 8), pady=6)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—É—Ç–∏
        self.source_entry.insert(0, self.settings.get("source_dir", ""))
        self.dest_entry.insert(0, self.settings.get("dest_dir", ""))
    
    def create_settings_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
        settings_frame = ctk.CTkFrame(parent)
        settings_frame.pack(fill="x", padx=12, pady=12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        settings_title = ctk.CTkLabel(
            settings_frame,
            text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        settings_title.pack(pady=(12, 8))
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_grid = ctk.CTkFrame(settings_frame)
        settings_grid.pack(fill="x", padx=12, pady=(0, 12))
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        row1 = ctk.CTkFrame(settings_grid)
        row1.pack(fill="x", pady=4)
        
        self.include_metadata_var = tk.BooleanVar(value=self.settings.get("include_metadata", True))
        metadata_checkbox = ctk.CTkCheckBox(
            row1,
            text="–í–∫–ª—é—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ",
            variable=self.include_metadata_var
        )
        metadata_checkbox.pack(side="left", padx=8, pady=6)
        
        # –ß–µ–∫–±–æ–∫—Å —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫)
        self.include_system_prompt_var = tk.BooleanVar(value=self.settings.get("include_system_prompt", True))
        system_prompt_checkbox = ctk.CTkCheckBox(
            row1,
            text="–í–∫–ª—é—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é",
            variable=self.include_system_prompt_var
        )
        system_prompt_checkbox.pack(side="left", padx=8, pady=6)
        
        # –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        row2 = ctk.CTkFrame(settings_grid)
        row2.pack(fill="x", pady=4)
        
        self.overwrite_existing_var = tk.BooleanVar(value=self.settings.get("overwrite_existing", False))
        overwrite_checkbox = ctk.CTkCheckBox(
            row2,
            text="–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã",
            variable=self.overwrite_existing_var
        )
        overwrite_checkbox.pack(side="left", padx=8, pady=6)
        
        self.create_subfolders_var = tk.BooleanVar(value=self.settings.get("create_subfolders", True))
        subfolders_checkbox = ctk.CTkCheckBox(
            row2,
            text="–°–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ–¥–ø–∞–ø–∫–∏",
            variable=self.create_subfolders_var
        )
        subfolders_checkbox.pack(side="left", padx=8, pady=6)
        
        # –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        row3 = ctk.CTkFrame(settings_grid)
        row3.pack(fill="x", pady=4)
        
        self.include_json_structure_var = tk.BooleanVar(value=self.settings.get("include_json_structure", False))
        json_structure_checkbox = ctk.CTkCheckBox(
            row3,
            text="–í–∫–ª—é—á–∏—Ç—å JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É",
            variable=self.include_json_structure_var
        )
        json_structure_checkbox.pack(side="left", padx=8, pady=6)
        
        self.add_file_headers_var = tk.BooleanVar(value=self.settings.get("add_file_headers", True))
        headers_checkbox = ctk.CTkCheckBox(
            row3,
            text="–î–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ñ–∞–π–ª–æ–≤",
            variable=self.add_file_headers_var
        )
        headers_checkbox.pack(side="left", padx=8, pady=6)

        # –ß–µ—Ç–≤–µ—Ä—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: —Ñ–ª–∞–≥–∏ —Ä–µ–Ω–¥–µ—Ä–∞
        row4 = ctk.CTkFrame(settings_grid)
        row4.pack(fill="x", pady=4)

        self.include_run_settings_var = tk.BooleanVar(value=self.settings.get("include_run_settings", True))
        include_run_checkbox = ctk.CTkCheckBox(
            row4,
            text="–í–∫–ª—é—á–∏—Ç—å Run Settings",
            variable=self.include_run_settings_var
        )
        include_run_checkbox.pack(side="left", padx=8, pady=6)

        self.exclude_thoughts_var = tk.BooleanVar(value=self.settings.get("exclude_thoughts", True))
        exclude_thoughts_checkbox = ctk.CTkCheckBox(
            row4,
            text="–ò—Å–∫–ª—é—á–∞—Ç—å –º—ã—Å–ª–∏ (thoughts)",
            variable=self.exclude_thoughts_var
        )
        exclude_thoughts_checkbox.pack(side="left", padx=8, pady=6)

        # –ü—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –∏ YAML FM
        row5 = ctk.CTkFrame(settings_grid)
        row5.pack(fill="x", pady=4)

        self.include_timestamps_var = tk.BooleanVar(value=self.settings.get("include_timestamps", False))
        timestamps_checkbox = ctk.CTkCheckBox(
            row5,
            text="–í–∫–ª—é—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏",
            variable=self.include_timestamps_var
        )
        timestamps_checkbox.pack(side="left", padx=8, pady=6)

        self.enable_yaml_front_matter_var = tk.BooleanVar(value=self.settings.get("enable_yaml_front_matter", False))
        yaml_checkbox = ctk.CTkCheckBox(
            row5,
            text="YAML Front Matter",
            variable=self.enable_yaml_front_matter_var
        )
        yaml_checkbox.pack(side="left", padx=8, pady=6)

        # –®–µ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: dry-run –∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
        row6 = ctk.CTkFrame(settings_grid)
        row6.pack(fill="x", pady=4)

        self.dry_run_var = tk.BooleanVar(value=self.settings.get("dry_run", False))
        dryrun_checkbox = ctk.CTkCheckBox(
            row6,
            text="–ü—Ä–æ–±–Ω—ã–π –∑–∞–ø—É—Å–∫ (dry-run)",
            variable=self.dry_run_var
        )
        dryrun_checkbox.pack(side="left", padx=8, pady=6)

        self.rename_extensionless_var = tk.BooleanVar(value=self.settings.get("rename_extensionless", False))
        rename_checkbox = ctk.CTkCheckBox(
            row6,
            text="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ .json",
            variable=self.rename_extensionless_var
        )
        rename_checkbox.pack(side="left", padx=8, pady=6)

        # –°–µ–¥—å–º–∞—è —Å—Ç—Ä–æ–∫–∞: —Ñ–æ—Ä–º–∞—Ç—ã –∏ –≤–æ—Ä–∫–µ—Ä—ã
        row7 = ctk.CTkFrame(settings_grid)
        row7.pack(fill="x", pady=4)

        self.export_format_var = tk.StringVar(value=(self.settings.get("export_format") or "md").lower())
        export_label = ctk.CTkLabel(row7, text="–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        export_label.pack(side="left", padx=(8, 4), pady=6)
        export_menu = ctk.CTkOptionMenu(row7, values=["md", "html", "both"], variable=self.export_format_var)
        export_menu.pack(side="left", padx=(0, 12), pady=6)

        self.workers_var = tk.IntVar(value=int(self.settings.get("workers", 4)))
        workers_label = ctk.CTkLabel(row7, text="–ü–æ—Ç–æ–∫–æ–≤:")
        workers_label.pack(side="left", padx=(8, 4), pady=6)
        self.workers_slider = ctk.CTkSlider(row7, from_=1, to=16, number_of_steps=15, command=lambda v: self.workers_var.set(int(v)))
        self.workers_slider.set(float(self.workers_var.get()))
        self.workers_slider.pack(side="left", fill="x", expand=True, padx=(0, 12), pady=6)

        # –í–æ—Å—å–º–∞—è —Å—Ç—Ä–æ–∫–∞: —à–∞–±–ª–æ–Ω Markdown
        row8 = ctk.CTkFrame(settings_grid)
        row8.pack(fill="x", pady=4)

        tpl_label = ctk.CTkLabel(row8, text="–®–∞–±–ª–æ–Ω Markdown (Jinja2):")
        tpl_label.pack(side="left", padx=(8, 4), pady=6)
        self.template_entry = ctk.CTkEntry(row8, placeholder_text="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É .j2 –∏–ª–∏ .md", height=30)
        self.template_entry.pack(side="left", fill="x", expand=True, padx=(0, 8), pady=6)
        if self.settings.get("template_path"):
            self.template_entry.insert(0, self.settings.get("template_path"))
        tpl_btn = ctk.CTkButton(row8, text="–í—ã–±—Ä–∞—Ç—å", width=80, command=self.browse_template_file)
        tpl_btn.pack(side="left", padx=(0, 8), pady=6)

        # –î–µ–≤—è—Ç–∞—è —Å—Ç—Ä–æ–∫–∞: —à–∞–±–ª–æ–Ω HTML
        row9 = ctk.CTkFrame(settings_grid)
        row9.pack(fill="x", pady=4)

        htpl_label = ctk.CTkLabel(row9, text="–®–∞–±–ª–æ–Ω HTML (Jinja2):")
        htpl_label.pack(side="left", padx=(8, 4), pady=6)
        self.html_template_entry = ctk.CTkEntry(row9, placeholder_text="–ü—É—Ç—å –∫ —à–∞–±–ª–æ–Ω—É .html/.j2", height=30)
        self.html_template_entry.pack(side="left", fill="x", expand=True, padx=(0, 8), pady=6)
        if self.settings.get("html_template_path"):
            self.html_template_entry.insert(0, self.settings.get("html_template_path"))
        htpl_btn = ctk.CTkButton(row9, text="–í—ã–±—Ä–∞—Ç—å", width=80, command=self.browse_html_template_file)
        htpl_btn.pack(side="left", padx=(0, 8), pady=6)
    
    def create_control_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."""
        control_frame = ctk.CTkFrame(parent)
        control_frame.pack(fill="x", padx=12, pady=12)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ctk.CTkFrame(control_frame)
        button_frame.pack(pady=8)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.convert_button = ctk.CTkButton(
            button_frame,
            text="üöÄ –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é",
            font=ctk.CTkFont(size=14, weight="bold"),
            height=40,
            command=self.start_conversion
        )
        self.convert_button.pack(side="left", padx=8, pady=6)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
        save_button = ctk.CTkButton(
            button_frame,
            text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            height=40,
            command=self.save_current_settings
        )
        save_button.pack(side="left", padx=8, pady=6)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        reset_button = ctk.CTkButton(
            button_frame,
            text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            height=40,
            command=self.reset_settings
        )
        reset_button.pack(side="left", padx=8, pady=6)

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        watch_button_frame = ctk.CTkFrame(control_frame)
        watch_button_frame.pack(pady=4)

        self.watch_start_button = ctk.CTkButton(
            watch_button_frame,
            text="üëÅÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            height=34,
            command=self.start_watching
        )
        self.watch_start_button.pack(side="left", padx=8, pady=4)

        self.watch_stop_button = ctk.CTkButton(
            watch_button_frame,
            text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ",
            height=34,
            command=self.stop_watching,
            state="disabled"
        )
        self.watch_stop_button.pack(side="left", padx=8, pady=4)
    
    def create_progress_section(self, parent):
        """–°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –ª–æ–≥–æ–≤."""
        progress_frame = ctk.CTkFrame(parent)
        progress_frame.pack(fill="both", expand=True, padx=12, pady=12)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        progress_title = ctk.CTkLabel(
            progress_frame,
            text="üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ –ª–æ–≥–∏",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        progress_title.pack(pady=(12, 8))
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_bar = ctk.CTkProgressBar(progress_frame)
        self.progress_bar.pack(fill="x", padx=12, pady=(0, 8))
        self.progress_bar.set(0)
        
        # –°—Ç–∞—Ç—É—Å
        self.status_label = ctk.CTkLabel(
            progress_frame,
            text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            font=ctk.CTkFont(size=11)
        )
        self.status_label.pack(pady=(0, 8))
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        log_frame = ctk.CTkFrame(progress_frame)
        log_frame.pack(fill="both", expand=True, padx=12, pady=(0, 12))
        
        log_label = ctk.CTkLabel(log_frame, text="–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:")
        log_label.pack(anchor="w", padx=10, pady=(10, 5))
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_frame = ctk.CTkFrame(log_frame)
        text_frame.pack(fill="both", expand=True, padx=8, pady=(0, 8))
        
        self.log_text = ctk.CTkTextbox(
            text_frame,
            wrap="word",
            font=ctk.CTkFont(size=10)
        )
        self.log_text.pack(side="left", fill="both", expand=True)
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ctk.CTkScrollbar(text_frame, command=self.log_text.yview)
        scrollbar.pack(side="right", fill="y")
        self.log_text.configure(yscrollcommand=scrollbar.set)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        clear_log_button = ctk.CTkButton(
            log_frame,
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
            height=30,
            command=self.clear_log
        )
        clear_log_button.pack(anchor="e", padx=10, pady=(0, 10))

        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Markdown
        preview_frame = ctk.CTkFrame(parent)
        preview_frame.pack(fill="both", expand=True, padx=12, pady=(0, 12))
        preview_title = ctk.CTkLabel(preview_frame, text="üñº –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä Markdown", font=ctk.CTkFont(size=14, weight="bold"))
        preview_title.pack(pady=(12, 8))
        path_row = ctk.CTkFrame(preview_frame)
        path_row.pack(fill="x", padx=12, pady=(0, 8))
        self.preview_path_entry = ctk.CTkEntry(path_row, placeholder_text="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞...", height=30)
        self.preview_path_entry.pack(side="left", fill="x", expand=True, padx=(0, 8), pady=6)
        browse_preview_btn = ctk.CTkButton(path_row, text="–û–±–∑–æ—Ä", width=80, command=self.browse_preview_file)
        browse_preview_btn.pack(side="left", padx=(0, 8), pady=6)
        render_btn = ctk.CTkButton(path_row, text="–†–µ–Ω–¥–µ—Ä", width=100, command=self.render_preview)
        render_btn.pack(side="left", padx=(0, 8), pady=6)
        self.preview_text = ctk.CTkTextbox(preview_frame, wrap="word", font=ctk.CTkFont(size=10))
        self.preview_text.pack(fill="both", expand=True, padx=12, pady=(0, 12))
    
    def browse_source_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏."""
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å JSON —Ñ–∞–π–ª–∞–º–∏ AI Studio"
        )
        if folder:
            self.source_entry.delete(0, tk.END)
            self.source_entry.insert(0, folder)
    
    def browse_dest_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è."""
        folder = filedialog.askdirectory(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Markdown —Ñ–∞–π–ª–æ–≤"
        )
        if folder:
            self.dest_entry.delete(0, tk.END)
            self.dest_entry.insert(0, folder)
    
    def browse_preview_file(self):
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª", filetypes=[("JSON", "*.json"), ("All", "*.*")])
        if path:
            self.preview_path_entry.delete(0, tk.END)
            self.preview_path_entry.insert(0, path)
    
    def render_preview(self):
        try:
            json_path = self.preview_path_entry.get().strip()
            if not json_path or not os.path.exists(json_path):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON —Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
                return
            settings = {
                "include_metadata": self.include_metadata_var.get(),
                "include_timestamps": self.include_timestamps_var.get(),
                "include_system_prompt": self.include_system_prompt_var.get(),
                "include_json_structure": self.include_json_structure_var.get(),
                "add_file_headers": self.add_file_headers_var.get(),
                "include_run_settings": self.include_run_settings_var.get(),
                "exclude_thoughts": self.exclude_thoughts_var.get(),
                "template_path": self.template_entry.get().strip(),
                "enable_yaml_front_matter": self.enable_yaml_front_matter_var.get(),
            }
            from app.app_logic import render_markdown_preview
            md_text = render_markdown_preview(json_path, settings)
            self.preview_text.delete(1.0, tk.END)
            self.preview_text.insert(tk.END, md_text)
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {e}")

    def browse_template_file(self):
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω Markdown (Jinja2)", filetypes=[("Templates", "*.j2 *.md *.tmpl"), ("All", "*.*")])
        if path:
            self.template_entry.delete(0, tk.END)
            self.template_entry.insert(0, path)

    def browse_html_template_file(self):
        path = filedialog.askopenfilename(title="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω HTML (Jinja2)", filetypes=[("Templates", "*.html *.j2 *.tmpl"), ("All", "*.*")])
        if path:
            self.html_template_entry.delete(0, tk.END)
            self.html_template_entry.insert(0, path)
    
    def save_current_settings(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            current_settings = {
                "source_dir": self.source_entry.get().strip(),
                "dest_dir": self.dest_entry.get().strip(),
                "include_metadata": self.include_metadata_var.get(),
                "include_timestamps": self.include_timestamps_var.get(),
                "include_system_prompt": self.include_system_prompt_var.get(),
                "overwrite_existing": self.overwrite_existing_var.get(),
                "create_subfolders": self.create_subfolders_var.get(),
                "include_json_structure": self.include_json_structure_var.get(),
                "add_file_headers": self.add_file_headers_var.get(),
                "include_run_settings": self.include_run_settings_var.get(),
                "exclude_thoughts": self.exclude_thoughts_var.get(),
                "dry_run": self.dry_run_var.get(),
                "rename_extensionless": self.rename_extensionless_var.get(),
                "workers": int(self.workers_var.get()),
                "export_format": self.export_format_var.get(),
                "template_path": self.template_entry.get().strip(),
                "html_template_path": self.html_template_entry.get().strip(),
                "enable_yaml_front_matter": self.enable_yaml_front_matter_var.get(),
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if save_settings(current_settings):
                self.settings = current_settings
                self.log_message("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", "info")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "error")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def reset_settings(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            from app.settings import reset_settings
            if reset_settings():
                # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                self.settings = load_settings()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                self.source_entry.delete(0, tk.END)
                self.dest_entry.delete(0, tk.END)
                
                self.include_metadata_var.set(True)
                self.include_system_prompt_var.set(True)
                self.overwrite_existing_var.set(False)
                self.create_subfolders_var.set(True)
                self.include_json_structure_var.set(False)
                self.add_file_headers_var.set(True)
                self.include_run_settings_var.set(True)
                self.exclude_thoughts_var.set(True)
                self.include_timestamps_var.set(False)
                self.enable_yaml_front_matter_var.set(False)
                self.dry_run_var.set(False)
                self.rename_extensionless_var.set(False)
                self.export_format_var.set("md")
                self.workers_var.set(4)
                self.workers_slider.set(4)
                self.template_entry.delete(0, tk.END)
                self.html_template_entry.delete(0, tk.END)
                
                self.log_message("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "info")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
            else:
                self.log_message("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫", "error")
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
                
        except Exception as e:
            self.log_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}", "error")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
    
    def start_conversion(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        source_dir = self.source_entry.get().strip()
        dest_dir = self.dest_entry.get().strip()
        
        if not source_dir or not dest_dir:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É –∏ –ø–∞–ø–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è!")
            return
        
        if not os.path.exists(source_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        conversion_settings = {
            "source_dir": source_dir,
            "dest_dir": dest_dir,
            "include_metadata": self.include_metadata_var.get(),
            "include_timestamps": self.include_timestamps_var.get(),
            "include_system_prompt": self.include_system_prompt_var.get(),
            "overwrite_existing": self.overwrite_existing_var.get(),
            "create_subfolders": self.create_subfolders_var.get(),
            "include_json_structure": self.include_json_structure_var.get(),
            "add_file_headers": self.add_file_headers_var.get(),
            "include_run_settings": self.include_run_settings_var.get(),
            "exclude_thoughts": self.exclude_thoughts_var.get(),
            "dry_run": self.dry_run_var.get(),
            "rename_extensionless": self.rename_extensionless_var.get(),
            "workers": int(self.workers_var.get()),
            "export_format": self.export_format_var.get(),
            "template_path": self.template_entry.get().strip(),
            "html_template_path": self.html_template_entry.get().strip(),
            "enable_yaml_front_matter": self.enable_yaml_front_matter_var.get(),
        }
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.convert_button.configure(state="disabled")
        self.convert_button.configure(text="üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...")
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥
        self.clear_log()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        self.log_message("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é...", "info")
        self.log_message(f"üìÅ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: {source_dir}", "info")
        self.log_message(f"üìÅ –ü–∞–ø–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {dest_dir}", "info")
        self.log_message("=" * 50, "info")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        conversion_thread = threading.Thread(
            target=self.run_conversion,
            args=(conversion_settings,),
            daemon=True
        )
        conversion_thread.start()
    
    def run_conversion(self, settings):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        try:
            convert_files(
                source_dir=settings["source_dir"],
                dest_dir=settings["dest_dir"],
                settings=settings,
                progress_queue=self.progress_queue
            )
        except Exception as e:
            self.progress_queue.put({
                "type": "error",
                "message": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"
            })
    
    def start_progress_handler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        def check_queue():
            try:
                while True:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                    message = self.progress_queue.get_nowait()
                    self.handle_progress_message(message)
            except queue.Empty:
                pass
            finally:
                # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
                self.root.after(100, check_queue)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        self.root.after(100, check_queue)
    
    def handle_progress_message(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ."""
        msg_type = message.get("type", "info")
        msg_text = message.get("message", "")
        
        if msg_type == "progress":
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progress_value = message.get("value", 0) / 100.0
            self.progress_bar.set(progress_value)
            self.status_label.configure(text=msg_text)
            self.log_message(f"üìä {msg_text}", "info")
            
        elif msg_type == "success":
            # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            self.progress_bar.set(1.0)
            self.status_label.configure(text="–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.log_message(f"‚úÖ {msg_text}", "success")
            self.convert_button.configure(state="normal", text="üöÄ –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
            
        elif msg_type == "warning":
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
            self.log_message(f"‚ö†Ô∏è {msg_text}", "warning")
            
        elif msg_type == "error":
            # –û—à–∏–±–∫–∞
            self.log_message(f"‚ùå {msg_text}", "error")
            self.convert_button.configure(state="normal", text="üöÄ –ù–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é")
            
        elif msg_type == "info":
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.log_message(f"‚ÑπÔ∏è {msg_text}", "info")
    
    def log_message(self, message, level="info"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥."""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
        colors = {
            "info": "white",
            "success": "green",
            "warning": "orange",
            "error": "red"
        }
        
        color = colors.get(level, "white")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        import datetime
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        formatted_message = f"[{timestamp}] {message}\n"
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞
        self.log_text.insert(tk.END, formatted_message)
        
        # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∫–æ–Ω—Ü—É
        self.log_text.see(tk.END)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.root.update_idletasks()
    
    def clear_log(self):
        """–û—á–∏—â–∞–µ—Ç –ª–æ–≥."""
        self.log_text.delete(1.0, tk.END)
        self.log_message("üßπ –õ–æ–≥ –æ—á–∏—â–µ–Ω", "info")
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞."""
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
            if self.watcher is not None:
                self.watcher.stop()
                self.watcher = None
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
            self.save_current_settings()
        except:
            pass
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
        self.root.destroy()
    
    def show(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ."""
        self.root.mainloop()

    # –ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π
    def start_watching(self):
        source_dir = self.source_entry.get().strip()
        dest_dir = self.dest_entry.get().strip()
        if not source_dir or not dest_dir:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—É—é –∏ —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫–∏ –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è")
            return
        if not os.path.exists(source_dir):
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–æ—Ä–º—ã
        settings = {
            "source_dir": source_dir,
            "dest_dir": dest_dir,
            "include_metadata": self.include_metadata_var.get(),
            "include_timestamps": self.include_timestamps_var.get(),
            "include_system_prompt": self.include_system_prompt_var.get(),
            "overwrite_existing": self.overwrite_existing_var.get(),
            "create_subfolders": self.create_subfolders_var.get(),
            "include_json_structure": self.include_json_structure_var.get(),
            "add_file_headers": self.add_file_headers_var.get(),
            "include_run_settings": self.include_run_settings_var.get(),
            "exclude_thoughts": self.exclude_thoughts_var.get(),
            "dry_run": self.dry_run_var.get(),
            "rename_extensionless": self.rename_extensionless_var.get(),
            "workers": int(self.workers_var.get()),
            "export_format": self.export_format_var.get(),
            "template_path": self.template_entry.get().strip(),
            "html_template_path": self.html_template_entry.get().strip(),
            "enable_yaml_front_matter": self.enable_yaml_front_matter_var.get(),
        }
        self.watcher = DirectoryWatcher(source_dir, dest_dir, settings, self.progress_queue)
        self.watcher.start()
        self.watch_start_button.configure(state="disabled")
        self.watch_stop_button.configure(state="normal")
        self.status_label.configure(text="–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def stop_watching(self):
        if self.watcher is not None:
            try:
                self.watcher.stop()
            finally:
                self.watcher = None
        self.watch_start_button.configure(state="normal")
        self.watch_stop_button.configure(state="disabled")
        self.status_label.configure(text="–ù–∞–±–ª—é–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
